{"ast":null,"code":"\"use strict\";\n\n/* tslint:disable */\n/* eslint-disable */\n/**\n * The Plaid API\n * The Plaid REST API. Please see https://plaid.com/docs/api for more details.\n *\n * The version of the OpenAPI document: 2020-09-14_1.343.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Configuration = exports.PlaidEnvironments = void 0;\nexports.PlaidEnvironments = {\n  production: 'https://production.plaid.com',\n  sandbox: 'https://sandbox.plaid.com',\n  development: 'https://development.plaid.com'\n};\nclass Configuration {\n  constructor() {\n    let param = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.apiKey = param.apiKey;\n    this.username = param.username;\n    this.password = param.password;\n    this.accessToken = param.accessToken;\n    this.basePath = param.basePath;\n    this.baseOptions = param.baseOptions;\n    this.formDataCtor = param.formDataCtor;\n    if (!this.baseOptions) this.baseOptions = {};\n    if (!this.baseOptions.headers) this.baseOptions.headers = {};\n    this.baseOptions.headers = Object.assign({\n      ['User-Agent']: `Plaid Node v13.0.0`,\n      ['Plaid-Version']: '2020-09-14'\n    }, this.baseOptions.headers);\n  }\n  /**\n   * Check if the given MIME is a JSON MIME.\n   * JSON MIME examples:\n   *   application/json\n   *   application/json; charset=UTF8\n   *   APPLICATION/JSON\n   *   application/vnd.company+json\n   * @param mime - MIME (Multipurpose Internet Mail Extensions)\n   * @return True if the given MIME is JSON, false otherwise.\n   */\n  isJsonMime(mime) {\n    const jsonMime = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n    return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n  }\n}\nexports.Configuration = Configuration;","map":{"version":3,"names":["exports","PlaidEnvironments","production","sandbox","development","Configuration","constructor","param","arguments","length","undefined","apiKey","username","password","accessToken","basePath","baseOptions","formDataCtor","headers","Object","assign","isJsonMime","mime","jsonMime","RegExp","test","toLowerCase"],"sources":["/Users/aryarana/Desktop/plaid_app/client/node_modules/plaid/configuration.ts"],"sourcesContent":["/* tslint:disable */\n/* eslint-disable */\n/**\n * The Plaid API\n * The Plaid REST API. Please see https://plaid.com/docs/api for more details.\n *\n * The version of the OpenAPI document: 2020-09-14_1.343.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface ConfigurationParameters {\n    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);\n    username?: string;\n    password?: string;\n    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);\n    basePath?: string;\n    baseOptions?: any;\n    formDataCtor?: new () => any;\n}\n\n// Edited by Plaid, lines 16-25\ninterface PlaidEnvironment {\n  [env: string]: string;\n}\n\nexport const PlaidEnvironments: PlaidEnvironment = {\n  production: 'https://production.plaid.com',\n  sandbox: 'https://sandbox.plaid.com',\n  development: 'https://development.plaid.com',\n};\n\nexport class Configuration {\n    /**\n     * parameter for apiKey security\n     * @param name security name\n     * @memberof Configuration\n     */\n    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);\n    /**\n     * parameter for basic security\n     *\n     * @type {string}\n     * @memberof Configuration\n     */\n    username?: string;\n    /**\n     * parameter for basic security\n     *\n     * @type {string}\n     * @memberof Configuration\n     */\n    password?: string;\n    /**\n     * parameter for oauth2 security\n     * @param name security name\n     * @param scopes oauth2 scope\n     * @memberof Configuration\n     */\n    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);\n    /**\n     * override base path\n     *\n     * @type {string}\n     * @memberof Configuration\n     */\n    basePath?: string;\n    /**\n     * base options for axios calls\n     *\n     * @type {any}\n     * @memberof Configuration\n     */\n    baseOptions?: any;\n    /**\n     * The FormData constructor that will be used to create multipart form data\n     * requests. You can inject this here so that execution environments that\n     * do not support the FormData class can still run the generated client.\n     *\n     * @type {new () => FormData}\n     */\n    formDataCtor?: new () => any;\n\n    constructor(param: ConfigurationParameters = {}) {\n        this.apiKey = param.apiKey;\n        this.username = param.username;\n        this.password = param.password;\n        this.accessToken = param.accessToken;\n        this.basePath = param.basePath;\n        this.baseOptions = param.baseOptions;\n        this.formDataCtor = param.formDataCtor;\n\n        if(!this.baseOptions) this.baseOptions = {};\n        if(!this.baseOptions.headers) this.baseOptions.headers = {};\n        this.baseOptions.headers = {\n          ['User-Agent']: `Plaid Node v13.0.0`,\n          ['Plaid-Version']: '2020-09-14',\n          ...this.baseOptions.headers,\n        }\n    }\n\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return True if the given MIME is JSON, false otherwise.\n     */\n    public isJsonMime(mime: string): boolean {\n        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n}\n"],"mappings":";;AAAA;AACA;AACA;;;;;;;;;;;;;;;AA4BaA,OAAA,CAAAC,iBAAiB,GAAqB;EACjDC,UAAU,EAAE,8BAA8B;EAC1CC,OAAO,EAAE,2BAA2B;EACpCC,WAAW,EAAE;CACd;AAED,MAAaC,aAAa;EAmDtBC,YAAA,EAA+C;IAAA,IAAnCC,KAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAiC,EAAE;IAC3C,IAAI,CAACG,MAAM,GAAGJ,KAAK,CAACI,MAAM;IAC1B,IAAI,CAACC,QAAQ,GAAGL,KAAK,CAACK,QAAQ;IAC9B,IAAI,CAACC,QAAQ,GAAGN,KAAK,CAACM,QAAQ;IAC9B,IAAI,CAACC,WAAW,GAAGP,KAAK,CAACO,WAAW;IACpC,IAAI,CAACC,QAAQ,GAAGR,KAAK,CAACQ,QAAQ;IAC9B,IAAI,CAACC,WAAW,GAAGT,KAAK,CAACS,WAAW;IACpC,IAAI,CAACC,YAAY,GAAGV,KAAK,CAACU,YAAY;IAEtC,IAAG,CAAC,IAAI,CAACD,WAAW,EAAE,IAAI,CAACA,WAAW,GAAG,EAAE;IAC3C,IAAG,CAAC,IAAI,CAACA,WAAW,CAACE,OAAO,EAAE,IAAI,CAACF,WAAW,CAACE,OAAO,GAAG,EAAE;IAC3D,IAAI,CAACF,WAAW,CAACE,OAAO,GAAAC,MAAA,CAAAC,MAAA;MACtB,CAAC,YAAY,GAAG,oBAAoB;MACpC,CAAC,eAAe,GAAG;IAAY,GAC5B,IAAI,CAACJ,WAAW,CAACE,OAAO,CAC5B;EACL;EAEA;;;;;;;;;;EAUOG,UAAUA,CAACC,IAAY;IAC1B,MAAMC,QAAQ,GAAW,IAAIC,MAAM,CAAC,+DAA+D,EAAE,GAAG,CAAC;IACzG,OAAOF,IAAI,KAAK,IAAI,KAAKC,QAAQ,CAACE,IAAI,CAACH,IAAI,CAAC,IAAIA,IAAI,CAACI,WAAW,EAAE,KAAK,6BAA6B,CAAC;EACzG;;AAlFJ1B,OAAA,CAAAK,aAAA,GAAAA,aAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}